
morphlines : [
  {
    id : morphline1

    importCommands : ["org.kitesdk.**", "com.stratio.morphlines.**"]

    commands : [
      {
        readLine {
          charset : UTF-8
        }
      }
      {
        split {
          inputField: message
          outputFields : [proj_lang, title, reqs, size]
          separator : " "
        }
      }
      {
        if {
          conditions : [
            { equals { proj_lang : en } }
          ]
          else : [
            { dropRecord {} }
          ]
        }
      }
      // Filter out records with very few requests
      {
        relationalFilter {
          field: reqs
          operator: ">"
          reference: 500
          class: java.lang.Integer
        }
      }
      // Sanitize title
      {
        java {
          code: """
          String title = (String) record.getFirstValue("title");
          if (title != null) {
            title = title.replaceAll("_", " ");
            try {
              title = java.net.URLDecoder.decode(title, "UTF-8");
  
            } catch (java.io.UnsupportedEncodingException ex) {
              ex.printStackTrace();
            } catch (IllegalArgumentException ex) {
              ex.printStackTrace();
            } catch (RuntimeException ex) {
              ex.printStackTrace();
            }
            record.replaceValues("title", title);
          }
          return child.process(record);
          """
        }
      }
      // Filter out pages that are not from the main namespace (e.g. User, Talk)
      {
        java {
          code: """
          String title = (String) record.getFirstValue("title");
          if (title != null && title.contains(":")) {
            return true;
          }
          return child.process(record);
          """
        }
      }
      // Extract date from filename
      {
        grok {
          dictionaryString : """
            YEAR (?:[0-9]{4})
            MONTH (?:[0-9]{2})
            DAY (?:[0-9]{2})
            HOUR (?:[0-9]{2})
            MINUTE (?:[0-9]{2})
            SECOND (?:[0-9]{2})
            """
          expressions : {
            file : """/pagecounts-%{YEAR:year}%{MONTH:month}%{DAY:day}-%{HOUR:hour}%{MINUTE:minute}%{SECOND:second}(\\.gz)?$"""
          }
          numRequiredMatches : all
          findSubstrings : true
        }
      }
      {
        addValues {
          timestamp : "@{year}-@{month}-@{day}T@{hour}:@{minute}:@{second}Z"
        }
      }
      {
        convertTimestamp {
          field : timestamp
          inputFormats : ["yyyy-MM-dd'T'HH:mm:ss'Z'"]
          inputTimezone : UTC
          outputFormat : unixTimeInMillis
          outputTimezone : UTC
        }
      }
      {
        removeFields {
          whitelist : ["literal:proj_lang", "literal:title", "literal:reqs", "literal:timestamp"]
        }
      }
    ] 
  }
]

