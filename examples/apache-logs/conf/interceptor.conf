morphlines: [
  {
    id: morphline1

    importCommands : ["org.kitesdk.**", "com.stratio.morphlines.**"]

    commands: [
      {
        readLine {
          charset: UTF-8
        }
      }
      {
        setValues {
          _attachment_body: "@{message}"
        }
      }
      {
        java {
          code: """
            record.replaceValues("_attachment_body", record.getFirstValue("_attachment_body").toString().getBytes(Charsets.UTF_8));
            return child.process(record);
            """
        }
      }
      {
        generateUUID {
          field: log_id
        }
      }
      {
        grok {
          dictionaryFiles: [/opt/sds/ingestion/examples/apache-logs/dict/grok-dictionaries/grok-patterns]
          expressions: {
            message: """%{IPORHOST:log_host} - %{USER:log_user} \[%{HTTPDATE:log_date}\] \"%{DATA:log_http_method} %{DATA:log_url_path} %{DATA:log_http_version}\" %{NONNEGINT:log_http_code} %{DATA:log_bytes_returned}"""
          }
        }
      }
      {
        addValues {
          timestamp: "@{year}-@{month}-@{day}T@{hour}:@{minute}:@{second}Z"
          // _id for MongoDB, globally unique
          time: "@{year}@{month}@{day}@{hour}@{minute}@{second}@{proj_lang}@{title}"
        }
      }
      {
        convertTimestamp {
          field: timestamp
          inputFormats: ["yyyy-MM-dd'T'HH:mm:ss'Z'"]
          inputTimezone: UTC
          outputFormat: unixTimeInMillis
          outputTimezone: UTC
        }
      }
      {
        convertTimestamp {
          field: log_date
          inputFormats: ["dd/MMM/yyyy:HH:mm:ss Z"]
          inputTimezone: UTC
          outputFormat: unixTimeInMillis
          outputTimezone: UTC
        }
      }
      // Add @timestamp for ElasticSearch
      {
        addValues {
          "@timestamp": "@{timestamp}"
        }
      }
      {
        sgeoIP {
          input: log_host
          database: "/opt/sds/ingestion/examples/apache-logs/dict/GeoLite2-City.mmdb"
          longitudeLatituteOutput: log_longitud_latitude
          isoCodeOutput: log_iso_code
        }
      }
      {
        java {
          code: """
          String coord = (String) record.getFirstValue("log_longitud_latitude");
          if (coord != null) {
            try {
            int list = coord.indexOf(",");
            String newValue = coord.substring(list+1, coord.length()) + ',' + coord.substring(0,list);
            record.replaceValues("log_longitud_latitude", newValue);
            } catch (Exception ex) {
              ex.printStackTrace();
            }
          }
          return child.process(record);
          """
        }
      }
    ]
  }
]
